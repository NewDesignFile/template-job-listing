:root {
  --breakpoint-sm: 40em;
  --breakpoint-md: 52em;
  --breakpoint-lg: 64em;
}

@mixin breakpoint($point) {
  @if $point == sm {
    @media screen and (min-width: var(--breakpoint-sm)) {
      @content;
    }
  }
  @else if $point == md {
    @media screen and (min-width: var(--breakpoint-md)) {
      @content;
    }
  }
  @else if $point == lg {
    @media screen and (min-width: var(--breakpoint-lg)) {
      @content;
    }
  }
}

.container {
  max-width: 816px;
  margin-inline: auto;
  padding-inline: var(--spacing-06);
  box-sizing: content-box;

  &--fluid {
    max-width: 100%;
  }

  @media screen and (max-width: 600px) {
    max-width: 100%;
    padding-inline: 20px;
  }
}

.flex {
  display: flex;

  &-column {
    flex-direction: column;
  }

  &-wrap {
    flex-wrap: wrap;
  }

  &-auto {
    flex: 1 1 auto;
    min-width: 0; 
    min-height: 0;
  }

  &-none {
    flex: none;
  }
}

$alignments: (
  start: flex-start,
  end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch
);

@each $name, $value in $alignments {
  .items-#{$name} {
    align-items: $value;
  }

  .self-#{$name} {
    align-self: $value;
  }
}

$justify-options: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly
);

@each $name, $value in $justify-options {
  .justify-#{$name} {
    justify-content: $value;
  }
}

$content-options: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  stretch: stretch
);

@each $name, $value in $content-options {
  .content-#{$name} {
    align-content: $value;
  }
}

@include breakpoint(sm) {
  .sm-flex {
    display: flex;
  }
}

@include breakpoint(md) {
  .md-flex {
    display: flex;
  }
}

@include breakpoint(lg) {
  .lg-flex {
    display: flex;
  }
}

.order {
  @for $i from 0 through 3 {
    &-#{$i} {
      order: $i;
    }
  }

  &-last {
    order: 99999;
  }
}

.col {
  &-4 {
    flex: 4;
    flex-grow: 100%;
  }

  &-8 {
    flex: 8;
    flex-grow: 100%;
  }
}

.gap-5 {
  gap: var(--spacing-06);
}